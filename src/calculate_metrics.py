#!/bin/python3
# Script Name: compute_metrics.py
# Description: Compute functional metrics for mutated peptides
# Author: Kohan

import os, sys, argparse
from api import *


def ArgumentParser(args=None):
    parser = argparse.ArgumentParser(prog='Compute functional metrics for mutated peptides',
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    # required arguments
    parser.add_argument('mhc_file', type=str, help='MHC allele TXT file with both MHC-I and MHC-II')
    parser.add_argument('mut_file', type=str, help='Mutation file generated by generate_peptides.py')
    parser.add_argument('peptide_prefix', type=str, help='Peptide file prefix generated by generate_peptides.py')
    parser.add_argument('out_prefix', type=str, help='Output prefix')
    # optional arguments
    parser.add_argument('--mhci_pred_file', type=str, default='', help='MHC-I binding prediction file generated by run_mhc_bind_pred.py')
    parser.add_argument('--mhcii_pred_file', type=str, default='', help='MHC-II binding prediction file generated by run_mhc_bind_pred.py')
    parser.add_argument('--mhci_pred_thrs', type=float, default=2, help='Threshold for MHC-I binding rank score')
    parser.add_argument('--mhcii_pred_thrs', type=float, default=10, help='Threshold for MHC-II binding rank score')
    parser.add_argument('--dna_af_col', type=str, default='', help='Column name of the DNA allelic fraction')
    parser.add_argument('--rna_af_col', type=str, default='', help='Column name of the RNA allelic fraction')
    parser.add_argument('--rna_qrt_col', type=str, default='', help='Column name of the RNA expression quartile')
    parser.add_argument('--mute_foreignness', action='store_true', help='Skip foreignness prediction')
    parser.add_argument('--save_all_aggregation', action='store_true', help='Output metrics of all aggregation methods')
    return parser


def Main(mut_file, peptide_prefix, mhc, alleles, mhc_bind_file, bind_threshold, out_prefix,
         metrics=['Robustness', 'PHBR', 'Agretopicity', 'SubCRD', 'PeptCRD', 'Foreignness'],
         save_all_aggregation=True):
    mut_df = pd.read_csv(mut_file, index_col=0)     # neoantigen df
    mhc_bind_df = pd.read_csv(mhc_bind_file)        # MHC-binding prediction df
    mhc_bind_df = mhc_bind_df.drop_duplicates()     # drop duplicates
    best_epi_obj = BestEpi(alleles, mhc_bind_df)    # BestEpi object
    epi_metrics_obj = EpiMetrics(mhc, alleles)      # EpiMetrics object
   
    ### compute metrics
    result_df, agg_df = dict(), dict()
    for idx, mut in mut_df.iterrows():
        # best epitope for each allele
        if not os.path.isfile(f'{peptide_prefix}{idx}.csv'): continue
        pept_df = pd.read_csv(f'{peptide_prefix}{idx}.csv')
        best_epi_df = best_epi_obj(pept_df)
        # metrics for each best epitope
        best_epi_df, epi_metrics = epi_metrics_obj(best_epi_df, bind_threshold, metrics=metrics, save_all_aggregation=save_all_aggregation)
        best_epi_df.to_csv(f'{out_prefix}.metrics{idx}.csv', index=False)
        result_df[idx] = epi_metrics
    result_df = pd.DataFrame(result_df).T
    
    return result_df


if __name__=='__main__':
    args = ArgumentParser().parse_args()
    mut_df = pd.read_csv(args.mut_file, index_col=0)

    # rename abundance columns
    rename_dict = dict()
    if (args.dna_af_col != '') and (args.dna_af_col in mut_df.columns):
        rename_dict[args.dna_af_col] = 'DNA_AF'
    if (args.rna_af_col != '') and (args.rna_af_col in mut_df.columns):
        rename_dict[args.rna_af_col] = 'RNA_AF'
    if (args.rna_qrt_col != '') and (args.rna_qrt_col in mut_df.columns):
        rename_dict[args.rna_qrt_col] = 'RNA_EXP_QRT'
    mut_df = mut_df.rename(columns=rename_dict)

    # MHC alleles
    mhc = MHC(args.mhc_file)

    # target metrics
    metrics = ['Robustness', 'PHBR', 'Agretopicity', 'SubCRD', 'PeptCRD', 'Foreignness']
    if args.mute_foreignness:
        metrics.remove('Foreignness')
    print('Target presentation and recognition metrics:', metrics)

    # MHC-I
    print('Calculating metrics for MHC-I alleles ...')
    if os.path.isfile(args.mhci_pred_file):
        mhci_alleles = mhc.name_dict['MHC-I']['standard']
        print('MHC-I alleles:', mhci_alleles)
        mhci_result_df = Main(args.mut_file,
                              args.peptide_prefix,
                              'i',
                              mhci_alleles,
                              args.mhci_pred_file,
                              args.mhci_pred_thrs,
                              f'{args.out_prefix}.mhci',
                              metrics=metrics,
                              save_all_aggregation=args.save_all_aggregation)
        mhci_result_df = mhci_result_df.rename(columns={col:f'{col}-I' for col in mhci_result_df.columns})
    else:
        print('MHC-I alleles are not provided')
        mhci_result_df = pd.DataFrame()
    
    # MHC-II
    print('Calculating metrics for MHC-II alleles ...')
    if os.path.isfile(args.mhcii_pred_file):
        mhcii_alleles = mhc.name_dict['MHC-II']['standard']
        print('MHC-II alleles:', mhcii_alleles)
        mhcii_result_df = Main(args.mut_file,
                               args.peptide_prefix,
                               'ii',
                               mhcii_alleles,
                               args.mhcii_pred_file,
                               args.mhcii_pred_thrs,
                               f'{args.out_prefix}.mhcii',
                               metrics=metrics,
                               save_all_aggregation=args.save_all_aggregation)
        mhcii_result_df = mhcii_result_df.rename(columns={col:f'{col}-II' for col in mhcii_result_df.columns})
    else:
        print('MHC-II alleles are not provided')
        mhcii_result_df = pd.DataFrame()
    
    result_df = pd.concat([mut_df, mhci_result_df, mhcii_result_df], axis=1)
    result_df.to_csv(f'{args.out_prefix}.metrics.csv', index=False)