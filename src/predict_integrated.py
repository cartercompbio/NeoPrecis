#!/bin/python3
# Script Name: predict_integrated.py
# Description: Predict immunogenicity using the multi-dimensional integrated model (DNA_AF, RNA_AF, RNA_EXP_QRT, PHBR, NP-Immuno (previous name: Immgen))
# Author: Kohan

import os, sys, argparse
import numpy as np
import pandas as pd

def ArgumentParser(args=None):
    parser = argparse.ArgumentParser(prog='Predict immunogenicity using the multi-dimensional integrated model',
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    # required arguments
    parser.add_argument('input_file', type=str, help='Annotated mutation file generated by calculate_metrics.py')
    parser.add_argument('model_file', type=str, help='Path to the logistic regression model')
    # optional arguments
    parser.add_argument('--dna_af_col', type=str, default='DNA_AF', help='Column name of the DNA allelic fraction')
    parser.add_argument('--rna_af_col', type=str, default='RNA_AF', help='Column name of the RNA allelic fraction')
    parser.add_argument('--rna_exp_col', type=str, default='RNA_EXP_QRT', help='Column name of the RNA expression quartile')
    parser.add_argument('--phbr_col', type=str, default='PHBR', help='Column name of the PHBR score')
    parser.add_argument('--immuno_col', type=str, default='Immgen', help='Column name of the NP-Immuno score')
    return parser


# logistic regression predictor
# normalize -> predict
# X features in order: DNA_AF, RNA_AF, RNA_EXP_QRT, PHBR, NP-Immuno
class LRPredictor():
    def __init__(self, model):
        self.mean = model['mean']
        self.std = model['std']
        self.coef = model['coef']
        self.intercept = model['intercept']
    
    def __call__(self, X):
        self._fillna(X) # fill NA
        X[:, 3] = 1 - X[:, 3]/100 # convert PHBR
        X = (X - self.mean) / self.std # normalization
        z = np.dot(X, self.coef.T) + self.intercept # prediction
        return self._sigmoid(z)
    
    def _sigmoid(self, z):
        return 1 / (1 + np.exp(-z))
    
    def _fillna(self, X):
        X[:, [0,1,4]] = np.nan_to_num(X[:, [0,1,4]], 0) # DNA_AF, RNA_AF, NP-Immuno
        X[:, 2] = np.nan_to_num(X[:, 2], 1) # RNA_EXP_QRT
        X[:, 3] = np.nan_to_num(X[:, 3], 100) # PHBR


def Main(input_file, model_file, dna_af_col, rna_af_col, rna_exp_col, phbr_col, immuno_col):
    df = pd.read_csv(input_file)
    models = np.load(model_file, allow_pickle=True).item()
    mhci_model = LRPredictor(models['MHC-I'])       # MHC-I model
    mhcii_model = LRPredictor(models['MHC-II'])     # MHC-II model

    # MHC-I
    X = df[[dna_af_col, rna_af_col, rna_exp_col, f'{phbr_col}-I', f'{immuno_col}-I']].to_numpy()
    mhci_preds = mhci_model(X)
    df['NP-Integrated-I'] = mhci_preds

    # MHC-II
    X = df[[dna_af_col, rna_af_col, rna_exp_col, f'{phbr_col}-II', f'{immuno_col}-II']].to_numpy()
    mhcii_preds = mhcii_model(X)
    df['NP-Integrated-II'] = mhcii_preds

    # save
    df.to_csv(input_file, index=False)


if __name__=='__main__':
    args = ArgumentParser().parse_args()
    Main(args.input_file, args.model_file, args.dna_af_col, args.rna_af_col, args.rna_exp_col, args.phbr_col, args.immuno_col)